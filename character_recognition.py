# -*- coding: utf-8 -*-
"""Character Recognition1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10qHJ3rrhBW_hCtzqSL2GpKT0KHdvEfzr
"""

import os
import numpy as np
from keras.preprocessing import image
PATH=os.getcwd()
train_path=PATH+'\DevanagariHandwrittenCharacterDataset\Train'
train_batch=os.listdir(train_path)

x_train=[]
y_train=[]
names={}

i=0
for classes in train_batch:
# #         print(classes)
        
        imaes_list = os.listdir(train_path+'\\'+classes)
        for imaes in imaes_list:

            img_path=train_path+ '\\' + classes+ '\\'+ imaes
            x=image.load_img(img_path)
            x=np.array(x)
            x = np.asarray(x)
            
            x_train.append(x)

            y_train.append(i)
            names[i]=classes
        i=i+1

test_path=PATH+'\DevanagariHandwrittenCharacterDataset\Test'
test_batch=os.listdir(test_path)
x_test=[]
y_test=[]
names_test={}
i=0
for classes in test_batch:

        imaes_list = os.listdir(test_path+'\\'+classes)
        for imaes in imaes_list:

            img_path=test_path+ '\\' + classes+ '\\'+ imaes
            x=image.load_img(img_path)
            x=np.array(x)
            x = np.asarray(x)

            x_test.append(x)
            y_test.append(i)
            names_test[i]=classes
        i=i+1

x_test=np.array(x_test)
x_test=x_test.reshape(13800,32,32,3)
x_train=np.array(x_train) 
x_train=x_train.reshape(78200,32,32,3)

y_train=np.array(y_train)
y_test=np.array(y_test)

from __future__ import print_function
import keras
# from keras.datasets import mnist
from keras.layers import Dense, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.models import Sequential
import matplotlib.pylab as plt

model = Sequential()
model.add(Conv2D(4, kernel_size=(5, 5), strides=(1, 1),
                 activation='relu',
                 input_shape=(32,32,3)))
model.add(MaxPooling2D(pool_size=(2, 2), strides=(2, 2)))
model.add(Conv2D(8, (5, 5),strides=(1,1), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(46, activation='softmax'))

model.compile(loss=keras.losses.sparse_categorical_crossentropy,
              optimizer=keras.optimizers.SGD(lr=0.01),
              metrics=['accuracy'])

# model.compile(loss=keras.losses.sparse_categorical_crossentropy,
#               optimizer=keras.optimizers.SGD(lr=0.01),
#               metrics=['accuracy'])

class AccuracyHistory(keras.callbacks.Callback):
    def on_train_begin(self, logs={}):
        self.acc = []

    def on_epoch_end(self, batch, logs={}):
        self.acc.append(logs.get('acc'))

history = AccuracyHistory()

model.fit(x_train, y_train,
          batch_size=200,
          epochs=50,
          verbose=1,
          validation_data=(x_test, y_test),
          callbacks=[history])

score = model.evaluate(x_test, y_test, verbose=0)
print('Test loss:', score[0])
print('Test accuracy:', score[1])

plt.plot(range(1,51), history.acc)
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.show()

# ttt=model.predict_classes(x_test)

model.summary()

